{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/steaman-backend/src/components/ForgotPassword/ForgotPassword.jsx\";\nimport React, { Component } from 'react';\nimport AuthLayout from '../Layout/AuthLayout';\nimport _ from 'lodash';\nimport * as actions from '../../actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { baseurl } from '../misc/Axios';\nimport axios_original from 'axios';\nimport { toast } from 'react-toastify';\nimport { Col } from 'reactstrap';\nimport ForgotPasswordForm from './ForgotPasswordForm';\nimport { renderErrorsAsList } from '../misc/functions';\n\nclass ForgotPassword extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: \"\",\n      errors: [],\n      message: \"\",\n      confirming: false,\n      password_changed: false,\n      not_found: false\n    };\n\n    this.resetPassword = e => {\n      e.preventDefault();\n      this.setState({ ...this.state,\n        resetting: true\n      });\n      axios_original.post(baseurl + '/partners/password', {\n        email: this.state.email,\n        redirect_url: \"/\"\n      }).then(response => {\n        if (response.status == 200) {\n          toast.success(response.data.message);\n          this.setState({ ...this.state,\n            email: '',\n            message: response.data.message,\n            resetting: false,\n            password_changed: true\n          });\n        }\n      }).catch(error => {\n        toast.error(\"Confirmation Resend Failed\");\n        this.setState({ ...this.state,\n          resetting: false,\n          errors: error.response.data.errors\n        });\n      });\n    };\n\n    this.onChange = e => {\n      this.setState({ ...this.state,\n        [e.target.name]: e.target.value,\n        errors: []\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AuthLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 55\n      }\n    }, \"Reset Password\"), !_.isEmpty(this.state.errors) ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-danger \",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 29\n      }\n    }, renderErrorsAsList(this.state.errors), \" \") : \"\", !_.isEmpty(this.state.message) ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-success \",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 76\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 81\n      }\n    }, this.state.message)), \" \") : \"\"), this.state.password_changed ? /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 52\n      }\n    }, \" \", this.state.message, \" \") : /*#__PURE__*/React.createElement(ForgotPasswordForm, Object.assign({\n      id: \"ForgotPasswordBox\"\n    }, this.state, {\n      onChange: this.onChange,\n      reset: this.reset,\n      resetPassword: this.resetPassword,\n      resetting: this.state.resetting,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 88\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  authentication: state.authentication\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ForgotPassword);","map":{"version":3,"sources":["/Users/mac/Desktop/steaman-backend/src/components/ForgotPassword/ForgotPassword.jsx"],"names":["React","Component","AuthLayout","_","actions","connect","bindActionCreators","baseurl","axios_original","toast","Col","ForgotPasswordForm","renderErrorsAsList","ForgotPassword","state","email","errors","message","confirming","password_changed","not_found","resetPassword","e","preventDefault","setState","resetting","post","redirect_url","then","response","status","success","data","catch","error","onChange","target","name","value","render","isEmpty","reset","mapStateToProps","authentication","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthLayout from '../Layout/AuthLayout'\nimport _ from 'lodash';\nimport * as actions from '../../actions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport {baseurl} from '../misc/Axios'\nimport axios_original from 'axios'\nimport {toast } from 'react-toastify'\nimport {Col} from 'reactstrap'\nimport ForgotPasswordForm from './ForgotPasswordForm'\nimport { renderErrorsAsList } from '../misc/functions';\nclass ForgotPassword extends Component {\n    state = {\n        email: \"\",\n        errors: [],\n        message: \"\",\n        confirming: false,\n        password_changed: false,\n        not_found: false\n    }\n    resetPassword = (e) => {\n        \n        e.preventDefault();\n        this.setState({\n            ...this.state,\n            resetting: true\n        })\n        axios_original.post(baseurl +'/partners/password', { email: this.state.email, redirect_url: \"/\" }).then(response => {\n            if (response.status == 200){\n                toast.success(response.data.message)\n                this.setState({\n                    ...this.state,\n                    email: '',\n                    message: response.data.message,\n                    resetting: false,\n                    password_changed: true\n                })\n            }\n               \n        }).catch((error) =>{\n\n            toast.error(\"Confirmation Resend Failed\")\n            this.setState({...this.state,\n            resetting: false,\n            errors: error.response.data.errors,\n            })\n\n            \n        })\n    }\n    \n    onChange = e => {\n        this.setState({\n            ...this.state,\n            [e.target.name]: e.target.value,\n            errors: [],\n            \n        })\n    }\n    render() {\n        return (\n            <AuthLayout>\n                <div className='row'>\n                    <div className='col-md-12 header'><h2>Reset Password</h2>\n                    {!_.isEmpty(this.state.errors) ?\n                            <div class=\"alert alert-danger \" role=\"alert\">{ renderErrorsAsList( this.state.errors)} </div> : \"\"}\n                        {!_.isEmpty(this.state.message) ?\n                            <div class=\"alert alert-success \" role=\"alert\"><Col><p>{this.state.message}</p></Col> </div> : \"\"}\n                            </div>\n                    {this.state.password_changed ? <div> {this.state.message} </div> : <ForgotPasswordForm id='ForgotPasswordBox' {...this.state} onChange={this.onChange} reset={this.reset} resetPassword={this.resetPassword} resetting={this.state.resetting} /> }\n                </div>\n            </AuthLayout>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({ authentication: state.authentication })\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) })\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ForgotPassword);\n"]},"metadata":{},"sourceType":"module"}