{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/steaman-backend/src/components/ConfirmEmail/ConfirmEmail.jsx\";\nimport React, { Component } from 'react';\nimport AuthLayout from '../Layout/AuthLayout';\nimport axios_original from 'axios';\nimport _ from 'lodash';\nimport ForgotPasswordForm from '../ForgotPassword/ForgotPasswordForm';\nimport * as actions from '../../actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { toast } from 'react-toastify';\nimport { baseurl } from \"../misc/Axios\";\n\nclass ConfirmEmail extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      email: \"\",\n      errors: [],\n      message: \"\",\n      confirming: false\n    };\n\n    this.confirmEmailAddress = e => {\n      console.log(\"CONFIRMING EMAIL\");\n      e.preventDefault();\n      this.setState({ ...this.state,\n        confirming: true\n      });\n      axios_original.post(baseurl + '/partners/confirmation', {\n        email: this.state.email\n      }).then(response => {\n        if (response.status == 200) {\n          toast.success(response.data.message);\n          this.setState({ ...this.state,\n            email: '',\n            message: response.data.message,\n            confirming: false\n          });\n        }\n      }).catch((error, errordata) => {\n        // toast.error(\"Confirmation Resend Failed\")\n        console.log(\"THIS IS THE CODE:\", error.response.code);\n        this.setState({ ...this.state,\n          confirming: false,\n          errors: error.response.data.errors\n        });\n      });\n    };\n\n    this.componentDidMount = () => {\n      console.log(\"THIS IS BASEURL \", baseurl);\n    };\n\n    this.onChange = e => {\n      this.setState({ ...this.state,\n        [e.target.name]: e.target.value,\n        errors: []\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AuthLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 55\n      }\n    }, \"Confirm Email\"), !_.isEmpty(this.state.errors) ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-danger \",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 29\n      }\n    }, this.state.errors, \" \") : \"\", !_.isEmpty(this.state.message) ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-success \",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 29\n      }\n    }, this.state.message, \" \") : \"\"), /*#__PURE__*/React.createElement(ForgotPasswordForm, Object.assign({\n      id: \"ForgotPasswordBox\",\n      confirm: true\n    }, this.state, {\n      confirming: this.state.confirming,\n      onChange: this.onChange,\n      confirmEmail: this.confirmEmailAddress,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 21\n      }\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  authentication: state.authentication\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConfirmEmail);","map":{"version":3,"sources":["/Users/mac/Desktop/steaman-backend/src/components/ConfirmEmail/ConfirmEmail.jsx"],"names":["React","Component","AuthLayout","axios_original","_","ForgotPasswordForm","actions","connect","bindActionCreators","toast","baseurl","ConfirmEmail","state","email","errors","message","confirming","confirmEmailAddress","e","console","log","preventDefault","setState","post","then","response","status","success","data","catch","error","errordata","code","componentDidMount","onChange","target","name","value","render","isEmpty","mapStateToProps","authentication","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport AuthLayout from '../Layout/AuthLayout'\nimport axios_original from 'axios';\nimport _ from 'lodash'\nimport ForgotPasswordForm from '../ForgotPassword/ForgotPasswordForm'\nimport * as actions from '../../actions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { toast } from 'react-toastify'\n\nimport {baseurl} from \"../misc/Axios\"\n\nclass ConfirmEmail extends Component {\n\n    \n    state = {\n        email: \"\",\n        errors: [],\n        message: \"\",\n        confirming: false\n    }\n    confirmEmailAddress = (e) => {\n        console.log(\"CONFIRMING EMAIL\")\n        e.preventDefault();\n        this.setState({\n            ...this.state,\n            confirming: true\n        })\n        axios_original.post(baseurl +'/partners/confirmation', { email: this.state.email }).then(response => {\n            if (response.status == 200){\n                toast.success(response.data.message)\n                this.setState({\n                    ...this.state,\n                    email: '',\n                    message: response.data.message,\n                    confirming: false\n                })\n            }\n            \n            \n        }).catch((error, errordata) =>{\n            \n            // toast.error(\"Confirmation Resend Failed\")\n            console.log(\"THIS IS THE CODE:\", error.response.code)\n            this.setState({...this.state,\n                confirming: false,\n            errors: error.response.data.errors})\n            \n        })\n    }\n    componentDidMount = () => {\n        console.log(\"THIS IS BASEURL \", baseurl)\n    }\n    onChange = e => {\n        this.setState({\n            ...this.state,\n            [e.target.name]: e.target.value,\n            errors: []\n        })\n    }\n\n    render() {\n        return (\n            <AuthLayout>\n                <div className='row'>\n                    <div className='col-md-12 header'><h2>Confirm Email</h2>\n                        {!_.isEmpty(this.state.errors) ?\n                            <div class=\"alert alert-danger \" role=\"alert\">{this.state.errors} </div> : \"\"}\n                        {!_.isEmpty(this.state.message) ?\n                            <div class=\"alert alert-success \" role=\"alert\">{this.state.message} </div> : \"\"}</div>\n                    <ForgotPasswordForm id='ForgotPasswordBox' confirm={true} {...this.state} confirming ={this.state.confirming} onChange={this.onChange} confirmEmail={this.confirmEmailAddress} />\n                </div>\n            </AuthLayout>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({ authentication: state.authentication })\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) })\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(ConfirmEmail);\n"]},"metadata":{},"sourceType":"module"}