{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/steaman-backend/src/components/PasswordEdit/PasswordEdit.jsx\";\nimport React, { Component } from 'react';\nimport PasswordEditForm from './PasswordEditForm';\nimport { toast } from 'react-toastify';\nimport axios_original from 'axios';\nimport { baseurl } from '../misc/Axios';\nimport * as actions from '../../actions';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport _ from 'lodash';\nimport qs from 'query-string';\nimport AuthLayout from '../Layout/AuthLayout';\nimport { Col, Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { renderErrorsAsList } from '../misc/functions';\n\nclass PasswordEdit extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      password: \"\",\n      password_confirmation: \"\",\n      current_password: \"\",\n      not_found: false,\n      password_changed: false\n    };\n\n    this.componentDidMount = () => {\n      const params = new URLSearchParams(window.location.search);\n      var show_confirmed = false;\n      var reset_password_token = null;\n\n      if (params.has('reset_password_token')) {\n        reset_password_token = params.get(\"reset_password_token\");\n      }\n\n      this.setState({ ...this.state,\n        reset_password_token: reset_password_token\n      }); // axios_original.get(baseurl +\"/partners/validate_token?auth_token=\"+reset_password_token+\"&redirect_url=/sdfsdfs\").then(response => {\n      // console.log(\"THIS IS RESPONSE AFTER MOUNT\", response)\n      // })\n    };\n\n    this.onChange = e => {\n      this.setState({ ...this.state,\n        [e.target.name]: e.target.value,\n        not_found: false\n      });\n    };\n\n    this.componentWillMount = () => {// axios_original.get(baseurl + \"/auth/validate_token?auth_token=\" +this.state.auth_token)\n    };\n\n    this.password_edit = e => {\n      e.preventDefault();\n      this.setState({ ...this.state,\n        loading: true\n      });\n      axios_original.put(baseurl + '/partners/password', {\n        password: this.state.password,\n        password_confirmation: this.state.password_confirmation,\n        reset_password_token: this.state.reset_password_token,\n        client_reset_password_token: this.state.reset_password_token\n      }).then(response => {\n        //token: this.state.reset_password_token\n        if (response.status == 200) {\n          toast.success(response.data.message);\n          this.setState({ ...this.state,\n            email: '',\n            message: response.data.message,\n            loading: false,\n            password_changed: true\n          });\n        }\n      }).catch(error => {\n        var not_found = false;\n        console.log(error);\n        console.log(\"RESPONSE CODE\", error.response.data.errors);\n\n        if (error.response.status == 401) {\n          not_found = true;\n        }\n\n        toast.error( /*#__PURE__*/React.createElement(\"ul\", {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 25\n          }\n        }, renderErrorsAsList(error.response.data.errors.full_messages)));\n        this.setState({ ...this.state,\n          resetting: false,\n          loading: false,\n          not_found: not_found\n        });\n      }); // this.props.actions.password_edit(this.state.email, this.state.password);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(AuthLayout, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 13\n      }\n    }, this.state.show_confirmed ? this.showConfirmed() : /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 69\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 18\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 52\n      }\n    }, \"Change Password \"), !_.isEmpty(this.state.errors) ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-danger \",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 29\n      }\n    }, this.state.errors, \" \") : \"\", this.state.not_found ? /*#__PURE__*/React.createElement(\"div\", {\n      class: \"alert alert-danger \",\n      role: \"alert\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 54\n      }\n    }, \"Requested Path Not Found\") : \"\", this.state.password_changed ? /*#__PURE__*/React.createElement(\"div\", {\n      className: \"alert alert-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 60\n      }\n    }, \"Password Successfully Changed. Click on the Button Below to login\") : \"\"), this.state.password_changed ? /*#__PURE__*/React.createElement(Col, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 60\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"btn btn-success\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 65\n      }\n    }, \"Login\"), \"  \") : /*#__PURE__*/React.createElement(PasswordEditForm, Object.assign({\n      id: \"password_editBox\"\n    }, this.state, {\n      loading: this.state.loading,\n      onChange: this.onChange,\n      password_edit: this.password_edit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 127\n      }\n    }))));\n  }\n\n  showConfirmed() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 16\n      }\n    }, /*#__PURE__*/React.createElement(\"div\", {\n      className: \"col-md-12 header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 17\n      }\n    }, \"Account Successfully Confirmed\")), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 17\n      }\n    }, \"Click on the button below to password_edit to your account\"), /*#__PURE__*/React.createElement(Link, {\n      to: \"/\",\n      className: \"btn btn-success\",\n      onClick: () => {\n        window.location.replace(window.location.protocol + '//' + window.location.host);\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 17\n      }\n    }, \"PasswordEdit\")));\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  authentication: state.authentication\n});\n\nconst mapDispatchToProps = dispatch => ({\n  actions: bindActionCreators(actions, dispatch)\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PasswordEdit);","map":{"version":3,"sources":["/Users/mac/Desktop/steaman-backend/src/components/PasswordEdit/PasswordEdit.jsx"],"names":["React","Component","PasswordEditForm","toast","axios_original","baseurl","actions","connect","bindActionCreators","_","qs","AuthLayout","Col","Button","Link","renderErrorsAsList","PasswordEdit","state","password","password_confirmation","current_password","not_found","password_changed","componentDidMount","params","URLSearchParams","window","location","search","show_confirmed","reset_password_token","has","get","setState","onChange","e","target","name","value","componentWillMount","password_edit","preventDefault","loading","put","client_reset_password_token","then","response","status","success","data","message","email","catch","error","console","log","errors","full_messages","resetting","render","showConfirmed","isEmpty","replace","protocol","host","mapStateToProps","authentication","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\n\nimport PasswordEditForm from './PasswordEditForm'\n\nimport {toast } from 'react-toastify'\nimport axios_original from 'axios'\nimport {baseurl} from '../misc/Axios'\nimport * as actions from '../../actions'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport _ from 'lodash'\nimport qs from 'query-string'\n\nimport AuthLayout from '../Layout/AuthLayout'\n\nimport { Col, Button } from 'reactstrap';\nimport { Link } from 'react-router-dom';\nimport { renderErrorsAsList } from '../misc/functions';\n\n\nclass PasswordEdit extends Component {\n\n    state = {\n        password: \"\",\n        password_confirmation: \"\",\n        current_password: \"\",\n        not_found: false,\n        password_changed: false\n      \n    }\n    componentDidMount = () => {\n        const params = new URLSearchParams(window.location.search)\n        var show_confirmed = false;\n        var reset_password_token = null;\n        if (params.has('reset_password_token')){\n           reset_password_token  =  params.get(\"reset_password_token\") \n        }\n\n        this.setState({\n            ...this.state, \n            reset_password_token: reset_password_token\n        })\n\n        // axios_original.get(baseurl +\"/partners/validate_token?auth_token=\"+reset_password_token+\"&redirect_url=/sdfsdfs\").then(response => {\n        // console.log(\"THIS IS RESPONSE AFTER MOUNT\", response)\n        // })\n    }\n\n    onChange = e => {\n        this.setState({\n            ...this.state,\n            [e.target.name]: e.target.value,\n            not_found: false\n        })\n    }\n    componentWillMount = () => {\n        // axios_original.get(baseurl + \"/auth/validate_token?auth_token=\" +this.state.auth_token)\n    }\n\n    password_edit = e => {\n        e.preventDefault();\n        this.setState({\n            ...this.state,\n            loading: true\n        })\n        axios_original.put(baseurl+'/partners/password', { password: this.state.password, password_confirmation: this.state.password_confirmation, reset_password_token: this.state.reset_password_token, client_reset_password_token: this.state.reset_password_token}).then(response => { //token: this.state.reset_password_token\n            if (response.status == 200){\n                toast.success(response.data.message)\n                this.setState({\n                    ...this.state,\n                    email: '',\n                    message: response.data.message,\n                    loading: false,\n                    password_changed: true\n                })\n            }\n               \n        }).catch((error) =>{\n            var not_found = false;\n            console.log(error)\n            console.log(\"RESPONSE CODE\", error.response.data.errors)\n            if (error.response.status == 401){\n                not_found = true\n            }\n            toast.error(<ul>{renderErrorsAsList(error.response.data.errors.full_messages)}</ul>)\n            this.setState({...this.state,\n            resetting: false,\n            loading: false,\n            not_found: not_found},\n            )\n        })\n        \n        // this.props.actions.password_edit(this.state.email, this.state.password);\n    }\n\n\n    render() {\n        return (\n            <AuthLayout>\n                {this.state.show_confirmed ? this.showConfirmed()  :<div className='row'>\n                \n                 <div className='col-md-12 header'><h2>Change Password </h2>\n                        {!_.isEmpty(this.state.errors) ?\n                            <div className=\"alert alert-danger \" role=\"alert\">{this.state.errors} </div> : \"\"}\n                            {this.state.not_found  ? <div class=\"alert alert-danger \" role=\"alert\">Requested Path Not Found</div>  : \"\" }\n                            \n                            {this.state.password_changed ? <div className=\"alert alert-success\">Password Successfully Changed. Click on the Button Below to login</div> : \"\" }\n                            </div>\n                    \n                            {this.state.password_changed ? <Col><Link to='/' className=\"btn btn-success\">Login</Link>  </Col>:<PasswordEditForm id='password_editBox' {...this.state} loading={this.state.loading} onChange={this.onChange} password_edit={this.password_edit} /> }\n                        \n                \n                                    \n                        </div>   }\n            </AuthLayout>\n        )\n    }\n\n    showConfirmed () {\n        return <div className='row'>\n            <div className='col-md-12 header'>\n                <h2>Account Successfully Confirmed</h2>\n            </div>\n            <Col md={12}>\n                <p>\n                    Click on the button below to password_edit to your account\n                </p>\n                {/* <Button color='success'>PasswordEdit</Button> */}\n                <Link to='/' className='btn btn-success' onClick={() => {\n                    window.location.replace(window.location.protocol + '//' + window.location.host \n                    )\n                }}>PasswordEdit</Link>\n                \n            </Col>\n            \n        </div>\n    }\n}\nconst mapStateToProps = state => ({ authentication: state.authentication })\nconst mapDispatchToProps = dispatch => ({ actions: bindActionCreators(actions, dispatch) })\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(PasswordEdit);\n\n"]},"metadata":{},"sourceType":"module"}