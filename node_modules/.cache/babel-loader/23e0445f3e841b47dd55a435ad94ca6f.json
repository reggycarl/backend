{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/steaman-backend/src/components/DeliveryConfigurations/City.jsx\";\nimport React, { Component } from 'react';\nimport { Card, CardTitle, CardBody, Row, Col, CardText, Form, FormGroup, Input, Label, FormText, Button } from 'reactstrap';\nimport Select from '../Controls/Select';\nimport moment from 'moment';\nimport axiosInstance, { baseurl } from '../misc/Axios';\nimport SubmitButton from '../Controls/SubmitButton';\nimport { Link } from 'react-router-dom';\nimport { getIndirectCities, getCitiesTypes, getGenders, getMaritalStatuses, getCategories, getCountries, getRegions } from '../misc/functions';\nimport { history } from '../../index';\nimport NumberField from '../Controls/NumberField'; // import './sizegroups.scss'\n\nimport Dropzone from 'react-dropzone';\nexport default class City extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      city: {\n        photo_id: null,\n        description: '',\n        link: ''\n      },\n      regions: [],\n      editing: false,\n      readOnly: this.props.match.params.id != \"\" && this.props.match.params.id != null,\n      city_uuid: this.props.match.params.id,\n      existing_record: this.props.match.params.id != \"\" && this.props.match.params.id != null\n    };\n\n    this.onChange = e => {\n      console.log(e.target.name);\n      this.setState({ ...this.state,\n        city: { ...this.state.city,\n          [e.target.name]: e.target.value\n        }\n      });\n    };\n\n    this.handleChangeSelect = (selectedOption, val) => {\n      var state = { ...this.state,\n        city: { ...this.state.city,\n          [selectedOption]: val.value\n        },\n        [selectedOption]: val\n      };\n      this.setState({ ...state\n      });\n    };\n\n    this.onDateChanged = (momentdate, attr_name) => {\n      // console.log(\"ClassName is\", momentdate.constructor.name)\n      var new_date = new moment();\n\n      if (momentdate.constructor.name == new_date.constructor.name) {\n        var new_state = { ...this.state,\n          city: { ...this.state.city,\n            [attr_name]: momentdate\n          }\n        };\n        this.setState({ ...new_state\n        });\n      } else {\n        console.log(this.state.city[attr_name]);\n        var date = new moment(this.state.city[attr_name]);\n        var new_state = { ...this.state,\n          city: { ...this.state.city,\n            [attr_name]: date\n          }\n        };\n        this.setState({ ...new_state\n        });\n      }\n    };\n\n    this.setCities = (state, city) => {\n      console.log(\"THIS IS STATE\", state);\n      var new_state = { ...state,\n        city: city,\n        country_id: state.countries.find(obj => obj.value == city.country_id),\n        region_id: state.regions.find(obj => obj.value == city.region_id)\n      };\n      return new_state;\n    };\n\n    this.onValueChange = (e, val) => {\n      console.log(val);\n      this.setState({ ...this.state,\n        city: { ...this.state.city,\n          [e]: val.floatValue\n        }\n      });\n    };\n\n    this.componentDidMount = () => {\n      var self = this;\n      Promise.all([getCountries()]).then(([countries]) => {\n        console.log(\"ID\", this.props.match.params.id);\n\n        if (self.state.existing_record == true) {\n          console.log(\"FECHING EXISTING RECORD\");\n          axiosInstance.get(`/admins/cities/${this.state.city_uuid}`).then(response => {\n            var new_state = { ...this.state,\n              existing_record: true,\n              readOnly: true,\n              countries: countries,\n              city: response.data.city\n            };\n            getRegions(new_state.city.country_uuid).then(regionsData => {\n              console.log(\"THIS IS NEW STATE BEFORE\", new_state);\n              new_state = { ...new_state,\n                regions: regionsData\n              };\n              console.log(\"THIS IS NEW STATE AFTER\", new_state);\n              new_state = self.setCities(new_state, response.data.city);\n              self.setState({ ...new_state\n              });\n            });\n          });\n        } else {\n          self.setState({ ...this.state,\n            countries: countries\n          });\n        }\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var self = this;\n\n      if (self.state.readOnly == true && self.state.existing_record == true) {\n        self.setState({ ...self.state,\n          readOnly: false\n        });\n      } else {\n        var instance;\n\n        if (self.state.existing_record != true) {\n          instance = axiosInstance.post('/admins/cities', {\n            city: this.state.city\n          });\n        } else {\n          instance = axiosInstance.put(`/admins/cities/${this.state.city_id || this.state.city.uuid}`, {\n            city: this.state.city\n          });\n        }\n\n        instance.then(response => {\n          console.log(\"RESPONSE\", response); // console.log(\"Setting state\")\n\n          if (this.state.existing_record == true) {\n            var new_state = this.setCities(this.state, response.data.city);\n            console.log(\"THIS IS NEW STATE\", new_state);\n            this.setState({ ...new_state,\n              readOnly: true\n            });\n          } else {\n            this.props.history.push(`/delivery_configurations/cities/${response.data.city.uuid}`); // this.setState({ ...this.state, readOnly: true, existing_record: true, editing: false })\n          }\n        });\n      }\n    };\n\n    this.handleChangeSelect = (selectedOption, val) => {\n      if (selectedOption == 'country_id') {\n        getRegions(val.uuid).then(response => {\n          this.setState({ ...this.state,\n            region_id: null,\n            regions: response\n          });\n        });\n      }\n\n      var state = { ...this.state,\n        city: { ...this.state.city,\n          [selectedOption]: val.value\n        },\n        [selectedOption]: val\n      };\n      this.setState({ ...state\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 25\n      }\n    }, \"City\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      className: \"btn btn-success btn-sm\",\n      to: \"/delivery_configurations/cities/new\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 33\n      }\n    }, \"New City\")))), /*#__PURE__*/React.createElement(CardText, {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 219,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 53\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"name\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225,\n        columnNumber: 45\n      }\n    }, \"Name\"), /*#__PURE__*/React.createElement(Input, {\n      type: \"text\",\n      name: \"name\",\n      value: this.state.city.name,\n      placeholder: \"City Name\",\n      onChange: this.onChange,\n      readOnly: this.state.readOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 231,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"exampleEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 232,\n        columnNumber: 45\n      }\n    }, \"Country\"), /*#__PURE__*/React.createElement(Select, {\n      name: \"country_id\",\n      value: this.state.country_id,\n      onChange: this.handleChangeSelect.bind(this, \"country_id\"),\n      options: this.state.countries,\n      isDisabled: this.state.readOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 233,\n        columnNumber: 45\n      }\n    })), /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 241,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"exampleEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 242,\n        columnNumber: 45\n      }\n    }, \"Region\"), /*#__PURE__*/React.createElement(Select, {\n      name: \"region_id\",\n      value: this.state.region_id,\n      onChange: this.handleChangeSelect.bind(this, \"region_id\"),\n      options: this.state.regions,\n      isDisabled: this.state.readOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 45\n      }\n    }))))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 37\n      }\n    })), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(SubmitButton, {\n      onClick: this.onSubmit,\n      readOnly: this.state.readOnly,\n      editing: this.state.editing,\n      existing_record: this.state.existing_record,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 41\n      }\n    })))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/steaman-backend/src/components/DeliveryConfigurations/City.jsx"],"names":["React","Component","Card","CardTitle","CardBody","Row","Col","CardText","Form","FormGroup","Input","Label","FormText","Button","Select","moment","axiosInstance","baseurl","SubmitButton","Link","getIndirectCities","getCitiesTypes","getGenders","getMaritalStatuses","getCategories","getCountries","getRegions","history","NumberField","Dropzone","City","state","city","photo_id","description","link","regions","editing","readOnly","props","match","params","id","city_uuid","existing_record","onChange","e","console","log","target","name","setState","value","handleChangeSelect","selectedOption","val","onDateChanged","momentdate","attr_name","new_date","constructor","new_state","date","setCities","country_id","countries","find","obj","region_id","onValueChange","floatValue","componentDidMount","self","Promise","all","then","get","response","data","country_uuid","regionsData","onSubmit","preventDefault","instance","post","put","city_id","uuid","push","render","bind"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, CardTitle, CardBody, Row, Col, CardText, Form, FormGroup, Input, Label, FormText, Button } from 'reactstrap'\nimport Select from '../Controls/Select'\n\n\nimport moment from 'moment';\nimport axiosInstance, { baseurl } from '../misc/Axios'\nimport SubmitButton from '../Controls/SubmitButton'\nimport {Link} from 'react-router-dom'\nimport { getIndirectCities, getCitiesTypes, getGenders, getMaritalStatuses, getCategories, getCountries, getRegions } from '../misc/functions'\nimport { history } from '../../index'\nimport NumberField from '../Controls/NumberField';\n// import './sizegroups.scss'\nimport Dropzone from 'react-dropzone';\nexport default class City extends Component {\n    state = {\n        city: {\n            photo_id: null,\n            description: '',\n            link: ''\n        },\n        regions: [],\n        editing: false,\n        readOnly: this.props.match.params.id != \"\" && this.props.match.params.id != null,\n        city_uuid: this.props.match.params.id,\n        existing_record: this.props.match.params.id != \"\" && this.props.match.params.id != null,\n    }\n    onChange = e => {\n        console.log(e.target.name)\n        this.setState({\n            ...this.state,\n            city: {\n                ...this.state.city,\n                [e.target.name]: e.target.value\n            }\n        }\n        )\n    }\n    handleChangeSelect = (selectedOption, val) => {\n        var state = {\n            ...this.state,\n            city: {\n                ...this.state.city,\n                [selectedOption]: val.value\n            },\n            [selectedOption]: val\n        }\n        this.setState({ ...state })\n    }\n    onDateChanged = (momentdate, attr_name) => {\n        // console.log(\"ClassName is\", momentdate.constructor.name)\n        var new_date = new moment();\n        if (momentdate.constructor.name == new_date.constructor.name) {\n            var new_state = {\n                ...this.state,\n                city: {\n                    ...this.state.city,\n                    [attr_name]: momentdate,\n                }\n            };\n            this.setState({ ...new_state });\n        }\n        else {\n            console.log(this.state.city[attr_name])\n            var date = new moment(this.state.city[attr_name])\n            var new_state = {\n                ...this.state,\n                city: {\n                    ...this.state.city,\n                    [attr_name]: date,\n\n                }\n            };\n            this.setState({ ...new_state });\n        }\n    }\n\n    setCities = (state, city) => {\n        console.log(\"THIS IS STATE\", state);\n        var new_state = {\n            ...state,\n            city: city,\n            country_id: state.countries.find(\n                (obj) => obj.value == city.country_id\n              ),\n              region_id: state.regions.find(\n                (obj) => obj.value == city.region_id\n              ),   \n        }\n        return new_state;\n    }\n    onValueChange = (e, val)=>{\n        console.log(val);\n        \n        this.setState({\n            ...this.state,\n            city: {\n                ...this.state.city,\n                [e]: val.floatValue\n            }\n        })\n    }\n   \n   \n    componentDidMount = () => {\n        var self = this\n        \n        Promise.all([getCountries()]).then(([countries]) => {\n            console.log(\"ID\", this.props.match.params.id)\n            if (self.state.existing_record == true) {\n                console.log(\"FECHING EXISTING RECORD\")\n                axiosInstance.get(`/admins/cities/${this.state.city_uuid}`).then((response) => {\n                    var new_state = {\n                        ...this.state,\n                        existing_record: true,\n                        readOnly: true,\n                        countries: countries,\n                        city: response.data.city\n                        \n                        \n                    }\n                    getRegions(new_state.city.country_uuid).then((regionsData)=> {\n                        console.log(\"THIS IS NEW STATE BEFORE\", new_state)\n                        new_state = {\n                            ...new_state,\n                            regions: regionsData\n                        }\n                        console.log(\"THIS IS NEW STATE AFTER\", new_state)\n                        new_state = self.setCities(new_state, response.data.city)\n                        self.setState({ ...new_state });\n                    });\n                    \n                    \n                })\n            }\n            else {\n                self.setState({\n                    ...this.state,\n                    countries: countries\n                })\n            }\n\n        })\n    }\n\n    onSubmit = e => {\n        e.preventDefault();\n        var self = this;\n        if (self.state.readOnly == true && self.state.existing_record == true) {\n            self.setState({\n                ...self.state,\n                readOnly: false\n            })\n        }\n\n        else {\n            var instance;\n            if (self.state.existing_record != true) {\n                instance = axiosInstance.post('/admins/cities', { city: this.state.city })\n            }\n            else {\n                \n                instance = axiosInstance.put(`/admins/cities/${this.state.city_id || this.state.city.uuid}`, { city: this.state.city })\n            }\n\n            instance.then((response) => {\n                console.log(\"RESPONSE\", response)\n\n                // console.log(\"Setting state\")\n                if (this.state.existing_record == true) {\n                    var new_state = this.setCities(this.state, response.data.city)\n                    console.log(\"THIS IS NEW STATE\", new_state)\n                    this.setState({ ...new_state, readOnly: true })\n                }\n                else {\n                    this.props.history.push(`/delivery_configurations/cities/${response.data.city.uuid}`)\n                    // this.setState({ ...this.state, readOnly: true, existing_record: true, editing: false })\n                }\n\n\n            })\n        }\n    }\n\n    handleChangeSelect = (selectedOption, val) => {\n        if (selectedOption ==  'country_id'){\n            getRegions(val.uuid).then(response=> {\n                this.setState({\n                    ...this.state,\n                    region_id: null,\n                    regions: response\n                })\n            })\n        }\n        var state = {\n          ...this.state,\n          city: {\n            ...this.state.city,\n            [selectedOption]: val.value,\n          },\n          [selectedOption]: val,\n        };\n        this.setState({ ...state });\n      };\n\n\n    render() {\n        return (\n            <Col md={12}>\n                <Card>\n\n                    <CardBody>\n                        <CardTitle className='col-md-12'>City\n                        <ul>\n                            <li><Link className='btn btn-success btn-sm' to='/delivery_configurations/cities/new'>New City</Link></li>\n                        </ul></CardTitle>\n                        <CardText className='col-md-12'>\n                            <Form className='row'>\n                                <Col md={12}>\n                                    \n                                <Row>\n                                                    <Col md={12}>\n                                                    <Row>\n                                        <FormGroup className='col-md-6'>\n                                            <Label for=\"name\">Name</Label>\n                                            <Input type=\"text\" name=\"name\" value={this.state.city.name} placeholder=\"City Name\" onChange={this.onChange} readOnly={this.state.readOnly} /> \n                                        </FormGroup>\n\n                                        </Row>\n                                        <Row>\n                                        <FormGroup className='col-md-6'>\n                                            <Label for=\"exampleEmail\">Country</Label>\n                                            <Select\n                                                name=\"country_id\"\n                                                value={this.state.country_id}\n                                                onChange={this.handleChangeSelect.bind(this, \"country_id\")}\n                                                options={this.state.countries}\n                                                isDisabled={this.state.readOnly}\n                                            /> \n                                        </FormGroup>\n                                        <FormGroup className='col-md-6'>\n                                            <Label for=\"exampleEmail\">Region</Label>\n                                            <Select\n                                                name=\"region_id\"\n                                                value={this.state.region_id}\n                                                onChange={this.handleChangeSelect.bind(this, \"region_id\")}\n                                                options={this.state.regions}\n                                                isDisabled={this.state.readOnly}\n                                            /> \n                                        </FormGroup>\n                                        </Row>\n                                                    </Col>\n                \n                  </Row>\n                                \n                                    <Row>\n                                        \n                                        \n                                    </Row>\n                                </Col>\n\n                                <Col md={12}>\n                                    {/* <Row> */}\n                                        <SubmitButton onClick={this.onSubmit} readOnly={this.state.readOnly} editing={this.state.editing} existing_record={this.state.existing_record} />\n                                    {/* </Row> */}\n                                </Col>\n                            </Form>\n                        </CardText>\n                    </CardBody>\n                </Card>\n            </Col>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}