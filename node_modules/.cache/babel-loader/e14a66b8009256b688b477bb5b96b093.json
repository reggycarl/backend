{"ast":null,"code":"import { takeLatest, put } from \"@redux-saga/core/effects\"; // import { baseurl } from \"../../components/Common/Axios\";\n\nimport axios_original from \"axios\";\nimport { LOGIN_SUCCESS, LOGIN_FAILED, SIGNUP_FAILED, LOGIN, LOGOUT, SIGNUP_SUCCESS, LOGINADMIN, LOGOUT_SUCCESS, SIGNUP, PARTNER_SIGNUP, LOGGINGIN, SIGNUP_IN_PROGRESS, PARTNER_LOGIN } from \"../actions/\";\nimport { baseurl } from \"../components/misc/Axios\";\nimport { toast } from \"react-toastify\";\nimport { delay } from \"redux-saga/effects\";\nexport function* authSaga() {\n  console.log(\"in AUTHSAGA\"); // yield takeLatest(LOGIN, loginAsync);\n\n  yield takeLatest(LOGOUT, logoutAsync);\n  yield takeLatest(SIGNUP, signupAsync);\n  yield takeLatest(PARTNER_SIGNUP, partnerSignupAsync); // yield takeLatest(PARTNER_LOGIN, partnerLoginAsync)\n\n  yield takeLatest(PARTNER_LOGIN, partnerLoginAsync);\n  yield takeLatest(LOGINADMIN, loginAdminAsync); // takeLatest(LOGOUT, logoutAsync);\n}\n\nfunction* loginAdminAsync(action) {\n  console.log(\"Logging in admin\", action);\n\n  try {\n    const response = yield axios_original.post(baseurl + \"/management/sign_in\", {\n      email: action.email,\n      password: action.password\n    });\n    toast.success(\"Successfully Logged In\");\n    yield put({\n      type: LOGIN_SUCCESS,\n      token: response.headers[\"access-token\"],\n      uid: response.headers.uid,\n      client: response.headers.client,\n      user: response.data,\n      default_path: \"/admins/\"\n    });\n  } catch (error) {\n    console.log(\"AN ERROR OCCURED\", error);\n    yield put({\n      type: LOGIN_FAILED,\n      error_message: error\n    });\n  }\n} // function* loginAsync(action) {\n//     console.log(\"ASYNINC LOGGIN IN\")\n//     yield put({ type: LOGGINGIN })\n//     try {\n//         const response = yield axios_original.post(baseurl + '/accounts/sign_in', { email: action.email, password: action.password })\n//         toast.success(\"Successfully Logged In\")\n//         yield put({ type: LOGIN_SUCCESS, token: response.headers[\"access-token\"], uid: response.headers.uid, client: response.headers.client, user: response.data, default_path: \"/users/\" })\n//     }\n//     catch (error) {\n//         console.log(\"AN ERROR OCCURED\", error);\n//         yield put({ type: LOGIN_FAILED, error_message: error })\n//     }\n// }\n\n\nfunction* partnerLoginAsync(action) {\n  console.log(\"ASYNINC LOGGIN IN\");\n  yield put({\n    type: LOGGINGIN\n  });\n\n  try {\n    const response = yield axios_original.post(baseurl + \"/partners/sign_in\", {\n      email: action.email,\n      password: action.password\n    });\n    console.log(\"THESE ARE HEADERS\", response.headers);\n    toast.success(\"Successfully Logged In\");\n    yield put({\n      type: LOGIN_SUCCESS,\n      token: response.headers[\"access-token\"],\n      uid: response.headers.uid,\n      client: response.headers.client,\n      user: response.data,\n      default_path: \"/partners/\"\n    });\n  } catch (error) {\n    console.log(\"AN ERROR OCCURED\", error);\n    yield put({\n      type: LOGIN_FAILED,\n      error_message: error\n    });\n  }\n}\n\nfunction* partnerSignupAsync(action) {\n  console.log(\"SIGNING UP\");\n  yield put({\n    type: SIGNUP_IN_PROGRESS\n  });\n\n  try {\n    const response = yield axios_original.post(baseurl + \"/partners\", {\n      first_name: action.first_name,\n      last_name: action.last_name,\n      username: action.username,\n      email: action.email,\n      password: action.password,\n      password_confirmation: action.password_confirmation,\n      phone: action.phone,\n      temp_company_name: action.company_name,\n      partner_type_id: action.partner_type_id,\n      steaman_commerce_partner_terms: action.steaman_commerce_partner_terms\n    });\n    toast.success(\"Account Succesfully Created. Kindly Confirm email address.\");\n    console.log(\"THIS IS THE SIGNUP RESPONSE\", response);\n    yield put({\n      type: SIGNUP_SUCCESS\n    });\n  } catch (error) {\n    // alert(\"ERROR\" + error)\n    // console.log(\"ERROS OCCURED\", error.response.data.errors.full_messages)\n    yield put({\n      type: SIGNUP_FAILED,\n      error_message: error\n    });\n  }\n}\n\nfunction* signupAsync(action) {\n  console.log(\"SIGNING UP\");\n  yield put({\n    type: SIGNUP_IN_PROGRESS\n  });\n\n  try {\n    const response = yield axios_original.post(baseurl + \"/accounts\", {\n      first_name: action.first_name,\n      last_name: action.last_name,\n      username: action.username,\n      email: action.email,\n      password: action.password,\n      password_confirmation: action.password_confirmation,\n      phone: action.phone,\n      account_type_id: action.account_type_id\n    });\n    toast.success(\"Account Succesfully Created. Kindly Confirm email address.\");\n    console.log(\"THIS IS THE SIGNUP RESPONSE\", response);\n    yield put({\n      type: SIGNUP_SUCCESS\n    });\n  } catch (error) {\n    // alert(\"ERROR\" + error)\n    // console.log(\"ERROS OCCURED\", error.response.data.errors.full_messages)\n    yield put({\n      type: SIGNUP_FAILED,\n      error_message: error\n    });\n  }\n}\n\nfunction* logoutAsync(action) {\n  console.log(\"LOGGING OUT IN SAGA\");\n\n  try {\n    const response = yield axios_original.delete(baseurl + \"/accounts/\", {\n      headers: {\n        \"access-token\": action.token,\n        uid: action.uid,\n        client: action.client\n      }\n    });\n    yield put({\n      type: LOGOUT_SUCCESS,\n      token: response.headers.authorization\n    });\n  } catch (error) {\n    yield put({\n      type: LOGOUT_SUCCESS\n    });\n  }\n}","map":{"version":3,"sources":["/Users/mac/Desktop/steaman-backend/src/sagas/authentication_saga.js"],"names":["takeLatest","put","axios_original","LOGIN_SUCCESS","LOGIN_FAILED","SIGNUP_FAILED","LOGIN","LOGOUT","SIGNUP_SUCCESS","LOGINADMIN","LOGOUT_SUCCESS","SIGNUP","PARTNER_SIGNUP","LOGGINGIN","SIGNUP_IN_PROGRESS","PARTNER_LOGIN","baseurl","toast","delay","authSaga","console","log","logoutAsync","signupAsync","partnerSignupAsync","partnerLoginAsync","loginAdminAsync","action","response","post","email","password","success","type","token","headers","uid","client","user","data","default_path","error","error_message","first_name","last_name","username","password_confirmation","phone","temp_company_name","company_name","partner_type_id","steaman_commerce_partner_terms","account_type_id","delete","authorization"],"mappings":"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","sourcesContent":["import { takeLatest, put } from \"@redux-saga/core/effects\";\n// import { baseurl } from \"../../components/Common/Axios\";\nimport axios_original from \"axios\";\nimport {\n  LOGIN_SUCCESS,\n  LOGIN_FAILED,\n  SIGNUP_FAILED,\n  LOGIN,\n  LOGOUT,\n  SIGNUP_SUCCESS,\n  LOGINADMIN,\n  LOGOUT_SUCCESS,\n  SIGNUP,\n  PARTNER_SIGNUP,\n  LOGGINGIN,\n  SIGNUP_IN_PROGRESS,\n  PARTNER_LOGIN,\n} from \"../actions/\";\nimport { baseurl } from \"../components/misc/Axios\";\nimport { toast } from \"react-toastify\";\nimport { delay } from \"redux-saga/effects\";\nexport function* authSaga() {\n  console.log(\"in AUTHSAGA\");\n  // yield takeLatest(LOGIN, loginAsync);\n  yield takeLatest(LOGOUT, logoutAsync);\n  yield takeLatest(SIGNUP, signupAsync);\n  yield takeLatest(PARTNER_SIGNUP, partnerSignupAsync);\n  // yield takeLatest(PARTNER_LOGIN, partnerLoginAsync)\n  yield takeLatest(PARTNER_LOGIN, partnerLoginAsync);\n  yield takeLatest(LOGINADMIN, loginAdminAsync);\n  // takeLatest(LOGOUT, logoutAsync);\n}\nfunction* loginAdminAsync(action) {\n  console.log(\"Logging in admin\", action);\n  try {\n    const response = yield axios_original.post(\n      baseurl + \"/management/sign_in\",\n      { email: action.email, password: action.password }\n    );\n\n    toast.success(\"Successfully Logged In\");\n    yield put({\n      type: LOGIN_SUCCESS,\n      token: response.headers[\"access-token\"],\n      uid: response.headers.uid,\n      client: response.headers.client,\n      user: response.data,\n      default_path: \"/admins/\",\n    });\n  } catch (error) {\n    console.log(\"AN ERROR OCCURED\", error);\n    yield put({ type: LOGIN_FAILED, error_message: error });\n  }\n}\n\n// function* loginAsync(action) {\n//     console.log(\"ASYNINC LOGGIN IN\")\n//     yield put({ type: LOGGINGIN })\n//     try {\n//         const response = yield axios_original.post(baseurl + '/accounts/sign_in', { email: action.email, password: action.password })\n\n//         toast.success(\"Successfully Logged In\")\n//         yield put({ type: LOGIN_SUCCESS, token: response.headers[\"access-token\"], uid: response.headers.uid, client: response.headers.client, user: response.data, default_path: \"/users/\" })\n\n//     }\n//     catch (error) {\n//         console.log(\"AN ERROR OCCURED\", error);\n//         yield put({ type: LOGIN_FAILED, error_message: error })\n//     }\n// }\n\nfunction* partnerLoginAsync(action) {\n  console.log(\"ASYNINC LOGGIN IN\");\n  yield put({ type: LOGGINGIN });\n  try {\n    const response = yield axios_original.post(baseurl + \"/partners/sign_in\", {\n      email: action.email,\n      password: action.password,\n    });\n    console.log(\"THESE ARE HEADERS\", response.headers);\n    toast.success(\"Successfully Logged In\");\n    yield put({\n      type: LOGIN_SUCCESS,\n      token: response.headers[\"access-token\"],\n      uid: response.headers.uid,\n      client: response.headers.client,\n      user: response.data,\n      default_path: \"/partners/\",\n    });\n  } catch (error) {\n    console.log(\"AN ERROR OCCURED\", error);\n    yield put({ type: LOGIN_FAILED, error_message: error });\n  }\n}\n\nfunction* partnerSignupAsync(action) {\n  console.log(\"SIGNING UP\");\n  yield put({ type: SIGNUP_IN_PROGRESS });\n  try {\n    const response = yield axios_original.post(baseurl + \"/partners\", {\n      first_name: action.first_name,\n      last_name: action.last_name,\n      username: action.username,\n      email: action.email,\n      password: action.password,\n      password_confirmation: action.password_confirmation,\n      phone: action.phone,\n      temp_company_name: action.company_name,\n      partner_type_id: action.partner_type_id,\n      steaman_commerce_partner_terms: action.steaman_commerce_partner_terms,\n    });\n    toast.success(\"Account Succesfully Created. Kindly Confirm email address.\");\n    console.log(\"THIS IS THE SIGNUP RESPONSE\", response);\n\n    yield put({ type: SIGNUP_SUCCESS });\n  } catch (error) {\n    // alert(\"ERROR\" + error)\n    // console.log(\"ERROS OCCURED\", error.response.data.errors.full_messages)\n    yield put({ type: SIGNUP_FAILED, error_message: error });\n  }\n}\n\nfunction* signupAsync(action) {\n  console.log(\"SIGNING UP\");\n  yield put({ type: SIGNUP_IN_PROGRESS });\n  try {\n    const response = yield axios_original.post(baseurl + \"/accounts\", {\n      first_name: action.first_name,\n      last_name: action.last_name,\n      username: action.username,\n      email: action.email,\n      password: action.password,\n      password_confirmation: action.password_confirmation,\n      phone: action.phone,\n      account_type_id: action.account_type_id,\n    });\n    toast.success(\"Account Succesfully Created. Kindly Confirm email address.\");\n    console.log(\"THIS IS THE SIGNUP RESPONSE\", response);\n    yield put({ type: SIGNUP_SUCCESS });\n  } catch (error) {\n    // alert(\"ERROR\" + error)\n    // console.log(\"ERROS OCCURED\", error.response.data.errors.full_messages)\n    yield put({ type: SIGNUP_FAILED, error_message: error });\n  }\n}\nfunction* logoutAsync(action) {\n  console.log(\"LOGGING OUT IN SAGA\");\n\n  try {\n    const response = yield axios_original.delete(baseurl + \"/accounts/\", {\n      headers: {\n        \"access-token\": action.token,\n        uid: action.uid,\n        client: action.client,\n      },\n    });\n    yield put({ type: LOGOUT_SUCCESS, token: response.headers.authorization });\n  } catch (error) {\n    yield put({ type: LOGOUT_SUCCESS });\n  }\n}\n"]},"metadata":{},"sourceType":"module"}