{"ast":null,"code":"var _jsxFileName = \"/Users/mac/Desktop/steaman-backend/src/components/PaymentMethods/PaymentMethod.jsx\";\nimport React, { Component } from 'react';\nimport { Card, CardTitle, CardBody, Row, Col, CardText, Form, FormGroup, Input, Label, FormText, Button } from 'reactstrap';\nimport Select from '../Controls/Select';\nimport moment from 'moment';\nimport axiosInstance from '../misc/Axios';\nimport SubmitButton from '../Controls/SubmitButton';\nimport { Link } from 'react-router-dom';\nimport { getMobileNetworks, getPaymentModes } from '../misc/functions';\nimport { history } from '../../index';\nimport PhoneInput from 'react-phone-input-2';\nexport default class PaymentMethod extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      payment_method: {\n        payment_mode_id: '',\n        mobile_network_id: '',\n        wallet_number: ''\n      },\n      editing: false,\n      readOnly: this.props.match.params.id != \"\" && this.props.match.params.id != null,\n      payment_method_uuid: this.props.match.params.id,\n      existing_record: this.props.match.params.id != \"\" && this.props.match.params.id != null\n    };\n\n    this.onChange = e => {\n      console.log(e.target.name);\n      this.setState({ ...this.state,\n        payment_method: { ...this.state.payment_method,\n          [e.target.name]: e.target.value\n        }\n      });\n    };\n\n    this.handleChangeSelect = (selectedOption, val) => {\n      var state = { ...this.state,\n        payment_method: { ...this.state.payment_method,\n          [selectedOption]: val.value\n        },\n        [selectedOption]: val\n      };\n      this.setState({ ...state\n      });\n    };\n\n    this.onWalletNumberChange = number => {\n      console.log(number);\n      this.setState({ ...this.state,\n        payment_method: { ...this.state.payment_method,\n          number: number\n        }\n      });\n    };\n\n    this.onDateChanged = (momentdate, attr_name) => {\n      // console.log(\"ClassName is\", momentdate.constructor.name)\n      var new_date = new moment();\n\n      if (momentdate.constructor.name == new_date.constructor.name) {\n        var new_state = { ...this.state,\n          payment_method: { ...this.state.payment_method,\n            [attr_name]: momentdate\n          }\n        };\n        this.setState({ ...new_state\n        });\n      } else {\n        console.log(this.state.payment_method[attr_name]);\n        var date = new moment(this.state.payment_method[attr_name]);\n        var new_state = { ...this.state,\n          payment_method: { ...this.state.payment_method,\n            [attr_name]: date\n          }\n        };\n        this.setState({ ...new_state\n        });\n      }\n    };\n\n    this.setPaymentMethods = (state, payment_method) => {\n      console.log(\"THIS IS STATE\", state);\n      var new_state = { ...state,\n        payment_method: payment_method,\n        // type_id: state.payment_method_types.\n        payment_mode_id: state.payment_modes.find(obj => obj.value == payment_method.payment_mode_id),\n        mobile_network_id: state.mobile_networks.find(obj => obj.value == payment_method.mobile_network_id)\n      };\n      return new_state;\n    };\n\n    this.componentDidMount = () => {\n      var self = this;\n      Promise.all([getPaymentModes(), getMobileNetworks()]).then(([payment_modes, mobile_networks]) => {\n        // console.log(\"ID\", this.props.match.params.id)\n        console.log(\"MOBILE NETWORKS MODES\", mobile_networks);\n\n        if (self.state.existing_record == true) {\n          console.log(\"FECHING EXISTING RECORD\");\n          axiosInstance.get(`/partners/payment_methods/${this.state.payment_method_uuid}`).then(response => {\n            var new_state = { ...this.state,\n              existing_record: true,\n              readOnly: true,\n              payment_modes: payment_modes,\n              mobile_networks: mobile_networks\n            };\n            new_state = self.setPaymentMethods(new_state, response.data.payment_method);\n            self.setState({ ...new_state\n            });\n          });\n        } else {\n          self.setState({ ...this.state,\n            payment_modes: payment_modes,\n            mobile_networks: mobile_networks\n          });\n        }\n      });\n    };\n\n    this.onSubmit = e => {\n      e.preventDefault();\n      var self = this;\n\n      if (self.state.readOnly == true && self.state.existing_record == true) {\n        self.setState({ ...self.state,\n          readOnly: false\n        });\n      } else {\n        var instance;\n\n        if (self.state.existing_record != true) {\n          instance = axiosInstance.post('/partners/payment_methods', { ...this.state\n          });\n        } else {\n          instance = axiosInstance.put(`/partners/payment_methods/${this.state.payment_method_id || this.state.payment_method.uuid}`, {\n            payment_method: this.state.payment_method\n          });\n        }\n\n        instance.then(response => {\n          console.log(\"RESPONSE\", response); // console.log(\"Setting state\")\n\n          if (this.state.existing_record == true) {\n            var new_state = this.setPaymentMethods(this.state, response.data.payment_method);\n            console.log(\"THIS IS NEW STATE\", new_state);\n            this.setState({ ...new_state,\n              readOnly: true\n            });\n          } else {\n            this.props.history.push(`/partners/payment_methods/${response.data.payment_method.uuid}`); // this.setState({ ...this.state, readOnly: true, existing_record: true, editing: false })\n          }\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Card, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(CardBody, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(CardTitle, {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 25\n      }\n    }, \"New PaymentMethod\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      className: \"btn btn-success btn-sm\",\n      to: \"/partners/payment_methods/new\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 33\n      }\n    }, \"New PaymentMethod\")))), /*#__PURE__*/React.createElement(CardText, {\n      className: \"col-md-12\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 25\n      }\n    }, /*#__PURE__*/React.createElement(Form, {\n      className: \"row\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 29\n      }\n    }, /*#__PURE__*/React.createElement(Col, {\n      md: 9,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"col-md-3\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"exampleEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185,\n        columnNumber: 45\n      }\n    }, \"Type\"), /*#__PURE__*/React.createElement(Select, {\n      name: \"payment_mode_id\",\n      value: this.state.payment_mode_id,\n      onChange: this.handleChangeSelect.bind(this, \"payment_mode_id\"),\n      options: this.state.payment_modes,\n      isDisabled: this.state.readOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"exampleEmail\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 45\n      }\n    }, \"Mobile Network\"), /*#__PURE__*/React.createElement(Select, {\n      name: \"mobile_network_id\",\n      value: this.state.mobile_network_id,\n      onChange: this.handleChangeSelect.bind(this, \"mobile_network_id\"),\n      options: this.state.mobile_networks,\n      isDisabled: this.state.readOnly,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 45\n      }\n    }))), /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(FormGroup, {\n      className: \"col-md-6\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 41\n      }\n    }, /*#__PURE__*/React.createElement(Label, {\n      for: \"number\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 45\n      }\n    }, \"Wallet Number\"), /*#__PURE__*/React.createElement(PhoneInput, {\n      country: 'gh',\n      value: this.state.payment_method.number,\n      countryCodeEditable: false // disableCountryCode={true}\n      ,\n      disableDropdown: true,\n      disabled: this.state.readOnly,\n      className: \"test-class\",\n      onChange: phone => this.onWalletNumberChange(phone),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 45\n      }\n    })))), /*#__PURE__*/React.createElement(Col, {\n      md: 12,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226,\n        columnNumber: 33\n      }\n    }, /*#__PURE__*/React.createElement(Row, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227,\n        columnNumber: 37\n      }\n    }, /*#__PURE__*/React.createElement(SubmitButton, {\n      onClick: this.onSubmit,\n      readOnly: this.state.readOnly,\n      editing: this.state.editing,\n      existing_record: this.state.existing_record,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228,\n        columnNumber: 41\n      }\n    }))))))));\n  }\n\n}","map":{"version":3,"sources":["/Users/mac/Desktop/steaman-backend/src/components/PaymentMethods/PaymentMethod.jsx"],"names":["React","Component","Card","CardTitle","CardBody","Row","Col","CardText","Form","FormGroup","Input","Label","FormText","Button","Select","moment","axiosInstance","SubmitButton","Link","getMobileNetworks","getPaymentModes","history","PhoneInput","PaymentMethod","state","payment_method","payment_mode_id","mobile_network_id","wallet_number","editing","readOnly","props","match","params","id","payment_method_uuid","existing_record","onChange","e","console","log","target","name","setState","value","handleChangeSelect","selectedOption","val","onWalletNumberChange","number","onDateChanged","momentdate","attr_name","new_date","constructor","new_state","date","setPaymentMethods","payment_modes","find","obj","mobile_networks","componentDidMount","self","Promise","all","then","get","response","data","onSubmit","preventDefault","instance","post","put","payment_method_id","uuid","push","render","bind","phone"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport { Card, CardTitle, CardBody, Row, Col, CardText, Form, FormGroup, Input, Label, FormText, Button } from 'reactstrap'\nimport Select from '../Controls/Select'\n\nimport moment from 'moment';\nimport axiosInstance from '../misc/Axios'\nimport SubmitButton from '../Controls/SubmitButton'\nimport {Link} from 'react-router-dom'\nimport { getMobileNetworks, getPaymentModes } from '../misc/functions'\nimport { history } from '../../index'\nimport PhoneInput from 'react-phone-input-2'\nexport default class PaymentMethod extends Component {\n    state = {\n        payment_method: {\n            payment_mode_id: '',\n            mobile_network_id: '',\n            wallet_number: '', \n        },\n\n        editing: false,\n        readOnly: this.props.match.params.id != \"\" && this.props.match.params.id != null,\n        payment_method_uuid: this.props.match.params.id,\n        existing_record: this.props.match.params.id != \"\" && this.props.match.params.id != null,\n    }\n    onChange = e => {\n        console.log(e.target.name)\n        this.setState({\n            ...this.state,\n            payment_method: {\n                ...this.state.payment_method,\n                [e.target.name]: e.target.value\n            }\n        }\n        )\n    }\n    handleChangeSelect = (selectedOption, val) => {\n        var state = {\n            ...this.state,\n            payment_method: {\n                ...this.state.payment_method,\n                [selectedOption]: val.value\n            },\n            [selectedOption]: val\n        }\n        this.setState({ ...state })\n    }\n    onWalletNumberChange = (number) => {\n        console.log(number);\n        this.setState({\n            ...this.state,\n            payment_method: {\n                ...this.state.payment_method,\n                number: number\n            }\n        })\n    }\n    onDateChanged = (momentdate, attr_name) => {\n        // console.log(\"ClassName is\", momentdate.constructor.name)\n        var new_date = new moment();\n        if (momentdate.constructor.name == new_date.constructor.name) {\n            var new_state = {\n                ...this.state,\n                payment_method: {\n                    ...this.state.payment_method,\n                    [attr_name]: momentdate,\n                }\n            };\n            this.setState({ ...new_state });\n        }\n        else {\n            console.log(this.state.payment_method[attr_name])\n            var date = new moment(this.state.payment_method[attr_name])\n            var new_state = {\n                ...this.state,\n                payment_method: {\n                    ...this.state.payment_method,\n                    [attr_name]: date,\n\n                }\n            };\n            this.setState({ ...new_state });\n        }\n    }\n\n    setPaymentMethods = (state, payment_method) => {\n        console.log(\"THIS IS STATE\", state)\n        var new_state = {\n            ...state,\n            payment_method: payment_method,\n            // type_id: state.payment_method_types.\n            payment_mode_id: state.payment_modes.find(obj => obj.value == payment_method.payment_mode_id),\n            mobile_network_id: state.mobile_networks.find(obj => obj.value == payment_method.mobile_network_id)\n\n        }\n        return new_state;\n    }\n    componentDidMount = () => {\n        var self = this\n        \n        Promise.all([getPaymentModes(), getMobileNetworks()]).then(([payment_modes, mobile_networks]) => {\n            // console.log(\"ID\", this.props.match.params.id)\n            console.log(\"MOBILE NETWORKS MODES\", mobile_networks)\n            if (self.state.existing_record == true) {\n                console.log(\"FECHING EXISTING RECORD\")\n                axiosInstance.get(`/partners/payment_methods/${this.state.payment_method_uuid}`).then((response) => {\n                    var new_state = {\n                        ...this.state,\n                        existing_record: true,\n                        readOnly: true,\n                        payment_modes: payment_modes,\n                        mobile_networks: mobile_networks,\n                    }\n                    new_state = self.setPaymentMethods(new_state, response.data.payment_method)\n                    self.setState({ ...new_state })\n                })\n            }\n            else {\n                self.setState({\n                    ...this.state,\n                    payment_modes: payment_modes,\n                    mobile_networks: mobile_networks\n                })\n            }\n\n        })\n    }\n\n    onSubmit = e => {\n\n        e.preventDefault();\n        var self = this;\n        if (self.state.readOnly == true && self.state.existing_record == true) {\n            self.setState({\n                ...self.state,\n                readOnly: false\n            })\n        }\n\n        else {\n            var instance;\n            if (self.state.existing_record != true) {\n                instance = axiosInstance.post('/partners/payment_methods', { ...this.state })\n            }\n            else {\n                \n                instance = axiosInstance.put(`/partners/payment_methods/${this.state.payment_method_id || this.state.payment_method.uuid}`, { payment_method: this.state.payment_method })\n            }\n\n            instance.then((response) => {\n                console.log(\"RESPONSE\", response)\n\n                // console.log(\"Setting state\")\n                if (this.state.existing_record == true) {\n                    var new_state = this.setPaymentMethods(this.state, response.data.payment_method)\n                    console.log(\"THIS IS NEW STATE\", new_state)\n                    this.setState({ ...new_state, readOnly: true })\n                }\n                else {\n                    this.props.history.push(`/partners/payment_methods/${response.data.payment_method.uuid}`)\n                    // this.setState({ ...this.state, readOnly: true, existing_record: true, editing: false })\n                }   \n\n\n            })\n        }\n    }\n\n\n    render() {\n        return (\n            <Col md={12}>\n                <Card>\n\n                    <CardBody>\n                        <CardTitle className='col-md-12'>New PaymentMethod\n                        <ul>\n                            <li><Link className='btn btn-success btn-sm' to='/partners/payment_methods/new'>New PaymentMethod</Link></li>\n                        </ul></CardTitle>\n                        <CardText className='col-md-12'>\n                            <Form className='row'>\n                                \n                                <Col md={9}>\n                                    <Row>\n                                        <FormGroup className='col-md-3'>\n                                            <Label for=\"exampleEmail\">Type</Label>\n                                            <Select\n                                                name=\"payment_mode_id\"\n                                                value={this.state.payment_mode_id}\n                                                onChange={this.handleChangeSelect.bind(this, \"payment_mode_id\")}\n                                                options={this.state.payment_modes}\n                                                isDisabled={this.state.readOnly}\n                                            />\n                                        </FormGroup>\n                                    </Row>\n                                    <Row>\n                                        <FormGroup className='col-md-6'>\n                                            <Label for=\"exampleEmail\">Mobile Network</Label>\n                                            <Select\n                                                name=\"mobile_network_id\"\n                                                value={this.state.mobile_network_id}\n                                                onChange={this.handleChangeSelect.bind(this, \"mobile_network_id\")}\n                                                options={this.state.mobile_networks}\n                                                isDisabled={this.state.readOnly}\n                                            /> \n                                        </FormGroup>\n                                    </Row>\n                                    <Row>\n                                        <FormGroup className='col-md-6'>\n                                            \n                                            <Label for=\"number\">Wallet Number</Label>\n                                            <PhoneInput\n                                                country={'gh'}\n                                                value={this.state.payment_method.number}\n                                                countryCodeEditable={false}\n                                                // disableCountryCode={true}\n                                                disableDropdown={true}\n                                                disabled={this.state.readOnly}\n                                                className='test-class'\n                                                onChange={(phone) => this.onWalletNumberChange(phone)}\n                                                />\n                                        </FormGroup>\n                                    </Row>\n                                \n                                </Col>\n                                \n                                <Col md={12}>\n                                    <Row>\n                                        <SubmitButton onClick={this.onSubmit} readOnly={this.state.readOnly} editing={this.state.editing} existing_record={this.state.existing_record} />\n                                    </Row>\n                                </Col>\n                            </Form>\n                        </CardText>\n                    </CardBody>\n                </Card>\n            </Col>\n        )\n    }\n}\n"]},"metadata":{},"sourceType":"module"}